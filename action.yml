# action.yml

name: 'Image Tag Updater'
description:
  'Updates a specific image tag in a specified file within a target directory.'
author: 'Your Name'
branding:
  icon: 'edit'
  color: 'blue'

inputs:
  target_path:
    description: 'Directory path where the values file is located'
    required: true
  tag_string:
    description: 'The tag string to match for updating the image tag'
    required: false
    default: 'tag'
  new_tag:
    description: 'The new image tag to replace the current one'
    required: true
  target_values_file:
    description:
      'The name of the values file to update'
    required: false
  github_token:
    description: 'GitHub token for pushing the updated file'
    required: true
  commit_message:
    description: 'Commit message for the update'
    required: false
    default: 'Update image tag in'
  branch:
    description: 'Branch where changes should be committed'
    required: false
    default: 'main'
  git_user_name:
    description: 'Git user.name for commits'
    required: false
    default: 'GitHub Action'
  git_user_email:
    description: 'Git user.email for commits'
    required: false
    default: 'actions@github.com'
  backup:
    description: 'Whether to create a backup file (true/false)'
    required: false
    default: 'false'
  repo:
    description: 'Git repository for commits'
    required: true
  file_pattern:
    description: 'File pattern to match multiple files (e.g., "*.values.yaml")'
    required: false
    default: ''
  dry_run:
    description: 'Run in dry-run mode without making actual changes'
    required: false
    default: 'false'
  debug:
    description: 'Run in debug mode'
    required: false
    default: 'false'
  tag_prefix:
    description: 'Prefix to add to the new tag (e.g., "v", "release-")'
    required: false
    default: ''
  tag_suffix:
    description: 'Suffix to add to the new tag (e.g., "-prod", "-staging")'
    required: false
    default: ''
  update_if_contains:
    description: 'Only update if current tag contains this string (e.g., "v1.", "dev")'
    required: false
    default: ''
  skip_if_contains:
    description: 'Skip update if current tag contains this string (e.g., "latest", "prod")'
    required: false
    default: ''
  summary_file:
    description: 'Path to save change summary JSON file (e.g., ".github/image-updates.json")'
    required: false
    default: ''

outputs:
  files_updated:
    description: 'Number of files updated'
  updated_files:
    description: 'Comma-separated list of updated file paths'
  old_tags:
    description: 'Comma-separated list of previous tag values'
  new_tag_applied:
    description: 'The final tag value that was applied (with prefix/suffix)'
  changes_made:
    description: 'Whether any changes were made (true/false)'
  commit_sha:
    description: 'SHA of the created commit (empty if dry run or no changes)'
  commit_sha_short:
    description: 'Short SHA (7 chars) of the created commit (empty if dry run or no changes)'

runs:
  using: 'docker'
  image: 'Dockerfile'
  env:
    TARGET_PATH: ${{ inputs.target_path }}
    TAG_STRING: ${{ inputs.tag_string }}
    NEW_TAG: ${{ inputs.new_tag}}
    TARGET_VALUES_FILE: ${{ inputs.target_values_file }}
    GITHUB_TOKEN: ${{ inputs.github_token }}
    COMMIT_MESSAGE: ${{ inputs.commit_message }}
    BRANCH: ${{ inputs.branch }}
    GIT_USER_NAME: ${{ inputs.git_user_name }}
    GIT_USER_EMAIL: ${{ inputs.git_user_email }}
    BACKUP: ${{ inputs.backup }}
    REPO: ${{ inputs.REPO }}
    FILE_PATTERN: ${{ inputs.file_pattern }}
    DRY_RUN: ${{ inputs.dry_run }}
    DEBUG: ${{ inputs.debug }}
    TAG_PREFIX: ${{ inputs.tag_prefix }}
    TAG_SUFFIX: ${{ inputs.tag_suffix }}
    UPDATE_IF_CONTAINS: ${{ inputs.update_if_contains }}
    SKIP_IF_CONTAINS: ${{ inputs.skip_if_contains }}
    SUMMARY_FILE: ${{ inputs.summary_file }}